"""
Django settings for apple project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/

"""
import os
from pathlib import Path
from dotenv import load_dotenv

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent



# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/



# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-s!u^ef-a_(!iafir-%h1u0o4b&-=@-%38+7d50iu3xh4qr040i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

#ALLOWED_HOSTS = [os.environ.get('RENDER_EXTERNAL_HOSTNAME'), 'localhost', '127.0.0.1']
ALLOWED_HOSTS = ['*']



# Application definition

SITE_ID = 3 # Permite que Django pueda identificar el sitio web


INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'users',
    'django.contrib.sites', # Se agrega la app de sites
    'allauth', # Se agrega la app de allauth
    'allauth.account', # Se agrega la app de allauth.account
    'allauth.socialaccount', # Se agrega la app de allauth.socialaccount
    'allauth.socialaccount.providers.google', # Se agrega la app de allauth.socialaccount.providers.google
    'allauth.socialaccount.providers.github', # Se agrega la app de allauth.socialaccount.providers.github
    'cloudinary',
    'cloudinary_storage',
    'products',
    'paypal.standard.ipn',

]



SOCIALACCOUNT_PROVIDERS = {
    "google":{
        "SCOPE": ["profile", "email"], # Permite que se pueda acceder al perfil y al correo
        "AUTH_PARAMS": {"access_type": "online"}, # Permite que se pueda acceder a la cuenta en línea
    },
    "github":{
        "SCOPE": [
            "user",            # Acceso al perfil básico
            "user:email",      # Acceso al email (incluso privados)
            "read:user",       # Lectura de perfil completo
        ],
        "AUTH_PARAMS": {
            "allow_signup": "true",  # Permite que nuevos usuarios se registren vía GitHub
        },
    }    
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',  # Se agrega el middleware de allauth
]

ROOT_URLCONF = 'apple.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'apple.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DATABASE_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # si tienes una carpeta 'static' en tu proyecto
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'allauth.account.auth_backends.AuthenticationBackend',
)

LOGIN_REDIRECT_URL = '/' # Redirige al usuario a la página principal una vez que se ha logueado
LOGOUT_REDIRECT_URL = '/' # Redirige al usuario a la página principal una vez que se ha deslogueado

SOCIALACCOUNT_LOGIN_ON_GET = True # Permite que el usuario pueda loguearse con una cuenta social al ingresar a la página principal


CLOUDINARY_STORAGE = {
    'CLOUD_NAME': os.getenv('CLOUDINARY_CLOUD_NAME'), # Se obtiene el nombre de la nube de Cloudinary
    'API_KEY': os.getenv('CLOUDINARY_API_KEY'), # Se obtiene la clave de la API de Cloudinary
    'API_SECRET': os.getenv('CLOUDINARY_API_SECRET'), # Se obtiene la clave secreta de la API de Cloudinary
}
CLOUDINARY_SECURE = True 


DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage' # Se define el almacenamiento de archivos en Cloudinary


#paypla settings
PAYPAL_TEST = True
PAYPAL_RECEIVER_EMAIL = os.getenv('PAYPAL_RECEIVER_EMAIL')
MIGRATION_MODULES = {
    'ipn': None,
}


#configuración email 
#EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_BACKEND = 'apple.backends.email_backend.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'appleudenar@gmail.com'
EMAIL_HOST_PASSWORD = 'nlax uzva vvxa zfpm'
EMAIL_PORT = '587'
EMAIL_USE_TLS = True

import ssl
EMAIL_SSL_CONTEXT = ssl._create_unverified_context() # Se deshabilita la verificación de certificados SSL para el envío de correos electrónicos